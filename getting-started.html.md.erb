---
title: Getting Started with the cf CLI
owner: CLI
---

<strong><%= modified_date %></strong>

This topic covers how to configure and get started with the cf CLI. This page assumes you have the latest version of the cf CLI. See the [Installing the cf Command Line Interface](./install-go-cli.html) topic for installation instructions.

##<a id='i18n'></a>Localize ##

The cf CLI translates terminal output into the language that you select. The default language is <code>en\_US</code>. The cf CLI supports the following languages:

*  Chinese (simplified): <code>zh\_Hans</code>
*  Chinese (traditional): <code>zh\_Hant</code>
*  English: <code>en\_US</code>
*  French: <code>fr\_FR</code>
*  German: <code>de\_DE</code>
*  Italian: <code>it\_IT</code>
*  Japanese: <code>ja\_JP</code>
*  Korean: <code>ko\_KR</code>
*  Portuguese (Brazil): <code>pt\_BR</code>
*  Spanish: <code>es\_ES</code>

Use [cf config](./cf-help.html#advanced) to set the language. To set the language with `cf config`, use the syntax: <code>$ cf config --locale YOUR_LANGUAGE </code>.  

For example, to set the language to Portuguese and confirm the change by running `cf help`:

<pre class="terminal">
$ cf config --locale pt_BR
$ cf help
NOME:
   cf - Uma ferramenta de linha de comando para interagir com Cloud Foundry

USO:
   [variáveis de ambiente] cf [opções globais] comando [argumentos...] [opções de comando]

VERSÃO:
   6.14.1+dc6adf6-2015-12-22
   ...
</pre>

<p class='note'><strong>Note</strong>: Localization affects only messages that the cf CLI generates. </p>

## <a id='login'></a>Login ##

Use [cf login](./cf-help.html#getting-started) to log into <%= vars.product_short %>. The `cf login` command uses the following syntax to specify a target API endpoint, an [org](#domains-etc), and a [space](#domains-etc): <code>$ cf login [-a API_URL] [-u USERNAME] [-p PASSWORD] [-o ORG] [-s SPACE] </code>.  

* `API_URL`: This is your API endpoint, <%=vars.api_endpoint%>.
* `USERNAME`: Your username.
* `PASSWORD`: Your password. <%=vars.pcf_rec%> discourages using the `-p` option, which may record your password in your shell history. 
* `ORG`: The org (organization) where you want to deploy your apps.
* `SPACE`: The space in the org where you want to deploy your apps.

The cf CLI prompts for credentials as needed. If you are a member of multiple orgs or spaces, `cf login` prompts you for which ones to log into. Otherwise it targets your org and space automatically.

<pre class="terminal">
$ cf login -a http://api.example.com -u username@example.com
API endpoint: https://api.example.com

Password>
Authenticating...
OK

Select an org (or press enter to skip):
1. example-org
2. example-other-org

Org> 1
Targeted org example-org

Select a space (or press enter to skip):
1. development
2. staging
3. production

Space> 1
Targeted space development

</pre>

Alternatively, you can write a script to log in and set your target using the non-interactive [cf api](./cf-help.html#getting-started), [cf auth](./cf-help.html#getting-started), and [cf target](./cf-help.html#getting-started) commands.

Upon successful login, the cf CLI saves a `config.json` file containing your API endpoint, org, space values, and access token. If you change these settings, the `config.json` file is updated accordingly.

By default, `config.json` is located in your `~/.cf` directory. The `CF_HOME` environment variable allows you to locate the `config.json` file wherever you like.

## <a id='user-roles'></a> Users and Roles ##

The cf CLI includes commands that list users and assign roles in orgs and spaces. See the [Orgs, Spaces, Roles, and Permissions](../concepts/roles.html) topic.

<strong>Commands for listing users.</strong> These commands take an org or space as an argument:

* [cf org-users](./cf-help.html#user-admin)

* [cf space-user](./cf-help.html#user-admin)

For example, to list the users who are members of an org:

<pre class="terminal">
$ cf org-users example-org
Getting users in org example-org as username@example.com...

ORG MANAGER
  username@example.com

BILLING MANAGER
  huey@example.com
  dewey@example.com

ORG AUDITOR
  louie@example.com
</pre>

<strong>Commands for managing roles.</strong> These commands require <%=vars.product_short%> admin permissions and take username, org or space, and role as arguments:

* [cf set-org-role](./cf-help.html#user-admin)

* [cf unset-org-role](./cf-help.html#user-admin)

* [cf set-space-role](./cf-help.html#user-admin)

* [cf unset-space-role](./cf-help.html#user-admin)

For example, to grant the Org Manager role to a user within an org:

<pre class="terminal">
$ cf set-org-role huey@example.com example-org OrgManager

Assigning role OrgManager to user huey@example.com in org example-org as username@example.com...
OK
</pre>

<p class="note"><strong>Note</strong>: If you are not a <%=vars.product_short%> admin, you see this message when you try to run these commands:
<code>error code: 10003, message: You are not authorized to perform the requested action</code></p>


## <a id='push'></a>Push

The [cf push](./cf-help.html#apps) command pushes a new app or syncs changes to an existing app.

If you do not provide a hostname (also known as subdomain), `cf push` routes your app to a URL of the form `APPNAME.DOMAIN` based on the name of your app and your default domain. If you want to map a different route to your app, see the [Routes and Domains](..devguide/deploy-apps/routes-domains.html) topic for information about creating routes. 

The `cf push` command supports many options that determine how and where the app instances are deployed. For details about the `cf push` command, see the [push entry](./cf-help.html#apps) in the Apps section of the Cloud Foundry CLI Reference Guide.

The following example pushes an application called `my-awesome-app` using the Ruby buildpack to the URL `http://my-awesome-app.example.com`: 

<pre class="terminal">
$ cf push my-awesome-app -b ruby_buildpack
Creating app my-awesome-app in org example-org / space development as username@example.com...
OK

Creating route my-awesome-app.example.com...
OK
...

1 of 1 instances running

App started
...

requested state: started
instances: 1/1
usage: 1G x 1 instances
urls: example-deleteme.cfapps.io
last uploaded: Wed Jun 8 23:43:15 UTC 2016
stack: cflinuxfs2
buildpack: ruby_buildpack

     state     since                    cpu    memory    disk      details
#0   running   2016-06-08 04:44:07 PM   0.0%   0 of 1G   0 of 1G
</pre>

For more information about available buildpacks, see the <a href="../buildpacks/">Buildpacks</a> topic.

## <a id='user-provided'></a> User-Provided Service Instances ##

The cf CLI has three ways of creating and updating user-provided service instances: interactively, non-interactively, and in conjunction with third-party log management software as described in [RFC 6587](http://tools.ietf.org/html/rfc6587). When used with third-party logging, the cf CLI sends data formatted according to [RFC 5424](http://tools.ietf.org/html/rfc5424).

Once created, user-provided service instances can be bound to an app with `cf bind-service`, unbound with `cf unbind-service`, renamed with `cf rename-service`, and deleted with `cf delete-service`.

### <a id='user-cups'></a>The cf create-user-provided-service Command ###

The alias for `create-user-provided-service` is `cups`.

To create a service instance in interactive mode, use the `-p` option with a comma-separated list of parameter names.
The cf CLI then prompts you for each parameter in turn.

  <pre class="terminal">cf cups SERVICE_INSTANCE -p host, port, dbname, username, password</pre>

To create a service instance non-interactively, use the `-p` option with a JSON hash of parameter keys and values.

  <pre class="terminal">cf cups SERVICE_INSTANCE -p '{"username":"admin","password":"pa55woRD"}'</pre>

To create a service instance that drains information to third-party log management software, use the `-l SYSLOG_DRAIN_URL` option.

  <pre class="terminal">cf cups SERVICE_INSTANCE -l syslog://example.com:514</pre>

### <a id='user-uups'></a> The cf update-user-provided-service Command ###

The alias for `update-user-provided-service` is `uups`.
Use `cf update-user-provided-service` to update one or more of the attributes for a user-provided service instance.
Attributes that you do not supply are not updated.

To update a service instance non-interactively, use the `-p` option with a JSON hash of parameter keys and values.

  <pre class="terminal">cf uups SERVICE_INSTANCE -p '{"username":"USERNAME","password":"PASSWORD"}'</pre>

To update a service instance that drains information to third-party log management software, use the `-l SYSLOG_DRAIN_URL` option.

  <pre class="terminal">cf uups SERVICE_INSTANCE -l syslog://example.com:514</pre>


## <a id='return-codes'></a> cf CLI Return Codes ##

The cf CLI uses exit codes, which is helpful for scripting and for confirming that a command has run successfully. For example, run `echo $?` in the terminal. If the return code is `0`, the command was successful.

## <a id='help'></a> The cf help Command ##

The `cf help` command lists the cf CLI commands and a brief description of each.
Passing the `-h` flag to any command lists detailed help, including any aliases. For example, to see detailed help for `cf delete`, run:

<pre class="terminal">
$ cf delete -h
NAME:
   delete - Delete an app

USAGE:
   cf delete APP_NAME [-f -r]

ALIAS:
   d

OPTIONS:
   -f       Force deletion without confirmation
   -r       Also delete any mapped routes
</pre>

